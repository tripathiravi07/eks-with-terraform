name: EKS Cluster Deprovisioning In AWS
on:
    workflow_dispatch:
env:
 # verbosity setting for Terraform logs
 TF_LOG: INFO
 TF_DIR: ./regions/us-east-1
 # Credentials for deployment to AWS
 AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
 AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
 REGION: us-east-1
 LATEST_VERSION: "1.33"
 CLUSTER_NAME: "eks-with-terraform"
jobs:
 terraform:
   name: "Terraform Infrastructure Change Management"
   runs-on: ubuntu-latest
   defaults:
     run:
       shell: bash
       # We keep Terraform files in the terraform directory.
       working-directory: ./regions/us-east-1
   steps:
     - name: Checkout the repository to the runner
       uses: actions/checkout@v2
    
     - name: Configure AWS Credentials
       uses: aws-actions/configure-aws-credentials@v2
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ env.REGION }}

     - name: Install Dependencies (kubectl, jq)
       run: |
             sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
             sudo apt-get install -y unzip jq curl 
   
             echo "Installing kubectl..."
             curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.32.3/2025-04-17/bin/linux/amd64/kubectl
             chmod +x ./kubectl
             mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH

     - name: Update Kubeconfig
       run: |
              aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME

     - name: Deleting NS
       run: kubectl get namespace zero-downtime-sample -o json \
                            | jq 'del(.spec.finalizers)' \
                            | kubectl replace --raw "/api/v1/namespaces/zero-downtime-sample/finalize" -f -
     
     - name: Deleting K8S Resources
       working-directory: ./k8s
       run: |
              ls -ltrh
              kubectl delete -f .

     - name: ⏳ After Deletion waiting for sometime to delete eks cluster.
       run: sleep 500

     - name: Setup Terraform with specified version on the runner
       uses: hashicorp/setup-terraform@v2
       with:
         terraform_version: 1.5.7

     - name: Initialize Terraform with Backend
       working-directory: ${{ env.TF_DIR }}
       env:
           TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
           TF_BACKEND_KEY: ${{ secrets.TF_BACKEND_KEY }}
           TF_BACKEND_REGION: ${{ secrets.TF_BACKEND_REGION }}
       run: |
           terraform init -reconfigure \
             -backend-config="bucket=${TF_BACKEND_BUCKET}" \
             -backend-config="key=${TF_BACKEND_KEY}" \
             -backend-config="region=${TF_BACKEND_REGION}"
    #  - name: Get EKS Cluster Name from Terraform Output
    #    id: get-cluster
    #    working-directory: ${{ env.TF_DIR }}
    #    run: |
    #            CLUSTER_NAME=$(terraform output -json | jq -r '.["eks-cluster-name"].value')
    #            echo "EKS Cluster Name: $CLUSTER_NAME"
    #            echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV

     - name: Terraform format
       id: fmt
       run: terraform fmt -check
    
     - name: Terraform validate
       id: validate
       run: terraform validate

     - name: Get Current Add-on Versions
       run: |
          echo "🔍 Fetching current add-on versions for cluster: $CLUSTER_NAME"

          CORE_DNS_VERSION=$(aws eks describe-addon \
          --cluster-name "$CLUSTER_NAME" \
          --addon-name coredns \
          --region "$REGION" | jq -r '.addon.addonVersion')

          VPC_CNI_VERSION=$(aws eks describe-addon \
          --cluster-name "$CLUSTER_NAME" \
          --addon-name vpc-cni \
          --region "$REGION" | jq -r '.addon.addonVersion')

          KUBE_PROXY_VERSION=$(aws eks describe-addon \
          --cluster-name "$CLUSTER_NAME" \
          --addon-name kube-proxy \
          --region "$REGION" | jq -r '.addon.addonVersion')

          echo "CORE_DNS_VERSION=$CORE_DNS_VERSION" >> $GITHUB_ENV
          echo "VPC_CNI_VERSION=$VPC_CNI_VERSION" >> $GITHUB_ENV
          echo "KUBE_PROXY_VERSION=$KUBE_PROXY_VERSION" >> $GITHUB_ENV
          echo "✅ Exported current add-on versions"

     - name: Terraform Plan - Upgrade EKS Version
       run: |
          terraform plan \
            -var="eks_version=${LATEST_VERSION}" \
            -var="coredns_v=${CORE_DNS_VERSION}" \
            -var="vpc_cni_v=${VPC_CNI_VERSION}" \
            -var="kube_proxy_v=${KUBE_PROXY_VERSION}"

     - name: Terraform Destroy - Deletes EKS Version
       run: |
          terraform destroy -auto-approve \
            -var="eks_version=${LATEST_VERSION}" \
            -var="coredns_v=${CORE_DNS_VERSION}" \
            -var="vpc_cni_v=${VPC_CNI_VERSION}" \
            -var="kube_proxy_v=${KUBE_PROXY_VERSION}"