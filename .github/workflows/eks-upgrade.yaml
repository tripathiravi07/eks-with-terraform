name: EKS Upgrade Checker and Upgrader

on:
  pull_request:
    branches:
      - main
    types:
      - closed
permissions: write-all

jobs:
  eks-upgrade:
    name: Check and Upgrade EKS Version via Terraform
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      REGION: us-east-1
      TF_DIR: ./regions/us-east-1
    outputs:
      cluster_name: ${{ steps.set-outputs.outputs.cluster_name }}
      current_version: ${{ steps.set-outputs.outputs.current_version }}
      latest_version: ${{ steps.set-outputs.outputs.latest_version }}
      coredns_version: ${{ steps.set-outputs.outputs.coredns_version }}
      vpc_cni_version: ${{ steps.set-outputs.outputs.vpc_cni_version }}
      kube_proxy_version: ${{ steps.set-outputs.outputs.kube_proxy_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Install Dependencies (Terraform 1.5.7, kubectl, jq)
        run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
          sudo apt-get install -y unzip jq curl 
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(grep -oP '(?<=UBUNTU_CODENAME=).*' /etc/os-release || lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          wget -O- https://apt.releases.hashicorp.com/gpg | \
          gpg --dearmor | \
          sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
          gpg --no-default-keyring \
          --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
          --fingerprint

          sudo apt update
          sudo apt-get install terraform
          echo "Verifying Installation"
          terraform -help

          echo "Installing kubectl..."
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.32.3/2025-04-17/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH

      - name: Initialize Terraform with Backend
        working-directory: ${{ env.TF_DIR }}
        env:
          TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
          TF_BACKEND_KEY: ${{ secrets.TF_BACKEND_KEY }}
          TF_BACKEND_REGION: ${{ secrets.TF_BACKEND_REGION }}
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="key=${TF_BACKEND_KEY}" \
            -backend-config="region=${TF_BACKEND_REGION}"

      - name: Get EKS Cluster Name from Terraform Output
        id: get-cluster
        working-directory: ${{ env.TF_DIR }}
        run: |
          CLUSTER_NAME=$(terraform output -json | jq -r '.["eks-cluster-name"].value')
          echo "EKS Cluster Name: $CLUSTER_NAME"
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV

      - name: Get Current EKS Version
        id: current-version
        run: |
          CURRENT_VERSION=$(aws eks describe-cluster --name $CLUSTER_NAME --region $REGION | jq -r '.cluster.version')
          echo "Current EKS Version: $CURRENT_VERSION"
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Get Latest Available EKS Version
        id: latest-version
        run: |
          LATEST_VERSION=$(aws eks describe-cluster-versions --region $REGION | jq -r '.clusterVersions[0].clusterVersion')
          echo "Latest Available EKS Version: $LATEST_VERSION"
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

      - name: Check if Upgrade is Needed
        id: upgrade-check
        run: |
          if [ "$CURRENT_VERSION" = "$LATEST_VERSION" ]; then
            echo "EKS cluster is already up to date."
            echo "UPGRADE_NEEDED=false" >> $GITHUB_ENV
          else
            echo "Upgrade available from $CURRENT_VERSION to $LATEST_VERSION."
            echo "UPGRADE_NEEDED=true" >> $GITHUB_ENV
          fi

      - name: Exit if No Upgrade Needed
        if: env.UPGRADE_NEEDED == 'false'
        run: |
          echo "Exiting workflow - EKS is already on latest version."
          exit 0

      - name: Update Kubeconfig
        if: env.UPGRADE_NEEDED == 'true'
        run: |
          aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME

      - name: Pre-Upgrade Check - Cluster, Nodes, Pods Health
        if: env.UPGRADE_NEEDED == 'true'
        run: |
            echo "Checking if EKS cluster is ACTIVE..."
            CLUSTER_STATUS=$(aws eks describe-cluster --name $CLUSTER_NAME --region $REGION | jq -r '.cluster.status')
            if [ "$CLUSTER_STATUS" != "ACTIVE" ]; then
              echo "‚ùå Cluster is not in ACTIVE state: $CLUSTER_STATUS"
              exit 1
            fi
        
            echo "Checking for nodes not in Ready state..."
            NOT_READY_NODES=$(kubectl get nodes --no-headers | awk '$2 != "Ready"')
            if [ -n "$NOT_READY_NODES" ]; then
              echo "‚ùå Found nodes not in Ready state:"
              echo "$NOT_READY_NODES"
              exit 1
            fi
        
            echo "Checking for pods not in Running state..."
            NOT_RUNNING_PODS=$(kubectl get pods -A --no-headers | awk '$4 != "Running"')
            if [ -n "$NOT_RUNNING_PODS" ]; then
              echo "‚ùå Found pods not in Running state:"
              echo "$NOT_RUNNING_PODS"
              exit 1
            fi
        
            echo "‚úÖ Pre-upgrade checks passed."

      - name: Get Current Add-on Versions
        if: env.UPGRADE_NEEDED == 'true'
        run: |
          echo "üîç Fetching current add-on versions for cluster: $CLUSTER_NAME"

          CORE_DNS_VERSION=$(aws eks describe-addon \
          --cluster-name "$CLUSTER_NAME" \
          --addon-name coredns \
          --region "$REGION" | jq -r '.addon.addonVersion')

          VPC_CNI_VERSION=$(aws eks describe-addon \
          --cluster-name "$CLUSTER_NAME" \
          --addon-name vpc-cni \
          --region "$REGION" | jq -r '.addon.addonVersion')

          KUBE_PROXY_VERSION=$(aws eks describe-addon \
          --cluster-name "$CLUSTER_NAME" \
          --addon-name kube-proxy \
          --region "$REGION" | jq -r '.addon.addonVersion')

          echo "CORE_DNS_VERSION=$CORE_DNS_VERSION" >> $GITHUB_ENV
          echo "VPC_CNI_VERSION=$VPC_CNI_VERSION" >> $GITHUB_ENV
          echo "KUBE_PROXY_VERSION=$KUBE_PROXY_VERSION" >> $GITHUB_ENV
          echo "‚úÖ Exported current add-on versions"

      - name: Terraform Plan - Upgrade EKS Version
        if: env.UPGRADE_NEEDED == 'true'
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform plan \
            -var="eks_version=${LATEST_VERSION}" \
            -var="coredns_v=${CORE_DNS_VERSION}" \
            -var="vpc_cni_v=${VPC_CNI_VERSION}" \
            -var="kube_proxy_v=${KUBE_PROXY_VERSION}"

      - name: ‚è∏Ô∏è Wait for Manual Approval
        if: env.UPGRADE_NEEDED == 'true'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GH_TOKEN }}
          approvers: tripathiravi07  # <-- Replace with your GitHub username
          minimum-approvals: 1
          issue-title: "Approve EKS upgrade to version ${{ env.LATEST_VERSION }}"
          issue-body: "Please approve or deny the EKS Version upgrade from ${{env.CURRENT_VERSION}} version to ${{ env.LATEST_VERSION }}version"
          exclude-workflow-initiator-as-approver: false

      - name: Terraform Apply - Upgrade EKS Version
        if: env.UPGRADE_NEEDED == 'true'
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform apply -auto-approve \
            -var="eks_version=${LATEST_VERSION}" \
            -var="coredns_v=${CORE_DNS_VERSION}" \
            -var="vpc_cni_v=${VPC_CNI_VERSION}" \
            -var="kube_proxy_v=${KUBE_PROXY_VERSION}"
      
      - name: Upgrade EKS Add-ons
        if: env.UPGRADE_NEEDED == 'true'
        run: |
              echo "üîç Listing installed add-ons for cluster: $CLUSTER_NAME"
              ADDONS=$(aws eks list-addons --cluster-name "$CLUSTER_NAME" --region "$REGION" | jq -r '.addons[]')
          
              if [ -z "$ADDONS" ]; then
                echo "‚ö†Ô∏è No add-ons found in the cluster."
                exit 0
              fi
          
              for ADDON in $ADDONS; do
                echo "üîÑ Checking latest version for add-on: $ADDON"
          
                ADDON_VERSION=$(aws eks describe-addon-versions \
                  --addon-name "$ADDON" \
                  --kubernetes-version "$LATEST_VERSION" \
                  --region "$REGION" \
                  | jq -r '.addons[0].addonVersions[0].addonVersion')
          
                if [ -z "$ADDON_VERSION" ] || [ "$ADDON_VERSION" == "null" ]; then
                  echo "‚ùå Could not find a compatible version for $ADDON with Kubernetes $LATEST_VERSION"
                  continue
                fi
          
                echo "‚¨ÜÔ∏è Upgrading $ADDON to version $ADDON_VERSION..."
                aws eks update-addon \
                  --cluster-name "$CLUSTER_NAME" \
                  --addon-name "$ADDON" \
                  --addon-version "$ADDON_VERSION" \
                  --resolve-conflicts OVERWRITE \
                  --region "$REGION"
          
                echo "‚úÖ Add-on $ADDON upgrade to version $ADDON_VERSION initiated."
              done
      
      - name: Upgrade EKS Node Groups (Rolling)
        if: env.UPGRADE_NEEDED == 'true'
        run: |
                echo "üîç Listing node groups in cluster: $CLUSTER_NAME"
                
                NODEGROUPS=$(aws eks list-nodegroups --cluster-name "$CLUSTER_NAME" --region "$REGION" | jq -r '.nodegroups[]')
            
                if [ -z "$NODEGROUPS" ]; then
                  echo "‚ö†Ô∏è No node groups found in the cluster."
                  exit 1
                fi
            
                for NODEGROUP in $NODEGROUPS; do
                  echo "‚¨ÜÔ∏è Updating node group: $NODEGROUP"
                  aws eks update-nodegroup-version \
                    --cluster-name "$CLUSTER_NAME" \
                    --nodegroup-name "$NODEGROUP" \
                    --region "$REGION" \
                    --no-force
            
                  echo "‚è≥ Waiting for node group $NODEGROUP to become ACTIVE (max 60 mins)..."
            
                  for i in {1..60}; do
                    STATUS=$(aws eks describe-nodegroup \
                      --cluster-name "$CLUSTER_NAME" \
                      --nodegroup-name "$NODEGROUP" \
                      --region "$REGION" \
                      | jq -r '.nodegroup.status')
            
                    echo "Attempt $i/60 - Status: $STATUS"
            
                    if [ "$STATUS" = "ACTIVE" ]; then
                      echo "‚úÖ Node group $NODEGROUP is ACTIVE"
                      break
                    fi
            
                    if [ "$STATUS" = "FAILED" ]; then
                      echo "‚ùå Upgrade failed for node group $NODEGROUP"
                      exit 1
                    fi
            
                    if [ $i -eq 60 ]; then
                      echo "‚è±Ô∏è Timeout: Node group $NODEGROUP did not become ACTIVE within 30 minutes."
                      exit 1
                    fi
            
                    sleep 30
                  done
                done

      - name: üò¥ so that things gets stablize
        run: sleep 180
      - name: Post-Upgrade Validation
        if: env.UPGRADE_NEEDED == 'true'
        run: |
            echo "Checking if EKS cluster is ACTIVE..."
            CLUSTER_STATUS=$(aws eks describe-cluster --name $CLUSTER_NAME --region $REGION | jq -r '.cluster.status')
            if [ "$CLUSTER_STATUS" != "ACTIVE" ]; then
              echo "‚ùå Cluster is not in ACTIVE state: $CLUSTER_STATUS"
              exit 1
            fi
        
            echo "Checking for nodes not in Ready state..."
            NOT_READY_NODES=$(kubectl get nodes --no-headers | awk '$2 != "Ready"')
            if [ -n "$NOT_READY_NODES" ]; then
              echo "‚ùå Found nodes not in Ready state:"
              echo "$NOT_READY_NODES"
              exit 1
            fi
        
            echo "Checking for pods not in Running state..."
            NOT_RUNNING_PODS=$(kubectl get pods -A --no-headers | awk '$4 != "Running"')
            if [ -n "$NOT_RUNNING_PODS" ]; then
              echo "‚ùå Found pods not in Running state:"
              echo "$NOT_RUNNING_PODS"
              exit 1
            fi
        
            echo "‚úÖ Post-upgrade checks passed."
      - name: Set job outputs for report
        id: set-outputs
        run: |
              echo "cluster_name=${CLUSTER_NAME}" >> $GITHUB_OUTPUT
              echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
              echo "latest_version=${LATEST_VERSION}" >> $GITHUB_OUTPUT
              echo "coredns_version=${CORE_DNS_VERSION}" >> $GITHUB_OUTPUT
              echo "vpc_cni_version=${VPC_CNI_VERSION}" >> $GITHUB_OUTPUT
              echo "kube_proxy_version=${KUBE_PROXY_VERSION}" >> $GITHUB_OUTPUT
  generate-report:
    name: Generate Upgrade Report
    runs-on: ubuntu-latest
    needs: [eks-upgrade]  # Waits for upgrade to finish
    env:
      REGION: us-east-1
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Show Environment Variables from Upgrade Job
        run: |
            echo "Cluster Name: ${{ needs.eks-upgrade.outputs.cluster_name }}"
            echo "Current Version: ${{ needs.eks-upgrade.outputs.current_version }}"
            echo "Latest Version: ${{ needs.eks-upgrade.outputs.latest_version }}"
            echo "CoreDNS Version: ${{ needs.eks-upgrade.outputs.coredns_version }}"
            echo "VPC CNI Version: ${{ needs.eks-upgrade.outputs.vpc_cni_version }}"
            echo "Kube-Proxy Version: ${{ needs.eks-upgrade.outputs.kube_proxy_version }}"
      
      - name: Update Kubeconfig
        run: |
              aws eks update-kubeconfig --region $REGION --name "${{ needs.eks-upgrade.outputs.cluster_name }}"

      - name: Collect Post-Upgrade Cluster Info
        run: |
          echo "üìä Collecting post-upgrade metrics..."
          # EKS Cluster Version
          aws eks describe-cluster --name "${{ needs.eks-upgrade.outputs.cluster_name }}" --region "$REGION" | jq '.cluster.version' > post_cluster_version.txt

          # Add-on Versions
          for ADDON in coredns vpc-cni kube-proxy; do
            aws eks describe-addon --cluster-name "${{ needs.eks-upgrade.outputs.cluster_name }}" --addon-name "$ADDON" --region "$REGION" | jq '.addon.addonVersion' > post_${ADDON}_version.txt
          done

          # Node Info
          kubectl get nodes -o wide > nodes_after.txt

          # Pod Info
          kubectl get pods -A > pods_after.txt

      - name: Compare with Pre-upgrade Info
        run: |
          echo "# üßæ EKS Upgrade Report" > eks-upgrade-report.md
          echo "## ‚úÖ EKS Version" >> eks-upgrade-report.md
          echo "**Before**: ${{ needs.eks-upgrade.outputs.current_version }}" >> eks-upgrade-report.md
          echo "**After**: $(cat post_cluster_version.txt)" >> eks-upgrade-report.md
          echo "## üîß Add-on Versions" >> eks-upgrade-report.md
          for ADDON in coredns vpc-cni kube-proxy; do
            # Using the uppercase variable names from the eks-upgrade outputs if they were used in your Terraform; adjust as needed.
            echo "**$ADDON** - Updated : $(cat post_${ADDON}_version.txt)" >> eks-upgrade-report.md
          done
          echo "## üß† Node Info (Post Upgrade)" >> eks-upgrade-report.md
          cat nodes_after.txt >> eks-upgrade-report.md
          echo "## üì¶ Pod Inventory" >> eks-upgrade-report.md
          cat pods_after.txt >> eks-upgrade-report.md

      - name: Upload Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: eks-upgrade-report
          path: eks-upgrade-report.md
