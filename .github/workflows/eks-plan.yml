name: EKS Plan and Notify

on:
  workflow_dispatch:
#   pull_request:
#     branches:
#       - main
permissions: write-all

jobs:
  eks-plan:
    name: Terraform Plan for EKS Upgrade (Only if Needed)
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    env:
      REGION: us-east-1
      TF_DIR: ./regions/us-east-1

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Install Dependencies (Terraform 1.5.7, kubectl, jq)
        run: |
            sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
            sudo apt-get install -y unzip jq curl 
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(grep -oP '(?<=UBUNTU_CODENAME=).*' /etc/os-release || lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            wget -O- https://apt.releases.hashicorp.com/gpg | \
            gpg --dearmor | \
            sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
            gpg --no-default-keyring \
            --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
            --fingerprint
  
            sudo apt update
            sudo apt-get install terraform
            echo "Verifying Installation"
            terraform -help

      - name: Get Cluster Name from Terraform Output
        id: get-cluster
        working-directory: ${{ env.TF_DIR }}
        env:
          TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
          TF_BACKEND_KEY: ${{ secrets.TF_BACKEND_KEY }}
          TF_BACKEND_REGION: ${{ secrets.TF_BACKEND_REGION }}
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="key=${TF_BACKEND_KEY}" \
            -backend-config="region=${TF_BACKEND_REGION}"
          CLUSTER_NAME=$(terraform output -json | jq -r '.["eks-cluster-name"].value')
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV

      - name: Get Current and Latest EKS Versions
        id: version-check
        run: |
          CURRENT_VERSION=$(aws eks describe-cluster --name $CLUSTER_NAME --region $REGION | jq -r '.cluster.version')
          LATEST_VERSION=$(aws eks describe-cluster-versions --region $REGION | jq -r '.clusterVersions[0].clusterVersion')

          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

          if [ "$CURRENT_VERSION" = "$LATEST_VERSION" ]; then
            echo "✅ EKS cluster is already on the latest version: $CURRENT_VERSION"
            echo "UPGRADE_NEEDED=false" >> $GITHUB_ENV
          else
            echo "🔔 Upgrade needed: $CURRENT_VERSION → $LATEST_VERSION"
            echo "UPGRADE_NEEDED=true" >> $GITHUB_ENV
          fi

      - name: Exit if No Upgrade Needed
        if: env.UPGRADE_NEEDED == 'false'
        run: |
          echo "No upgrade required. Exiting..."
          exit 0

    #   - name: Setup Terraform
    #     if: env.UPGRADE_NEEDED == 'true'
    #     uses: hashicorp/setup-terraform@v3
    #     with:
    #       terraform_version: 1.5.7

    #   - name: Terraform Init
    #     if: env.UPGRADE_NEEDED == 'true'
    #     working-directory: ${{ env.TF_DIR }}
    #     env:
    #       TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
    #       TF_BACKEND_KEY: ${{ secrets.TF_BACKEND_KEY }}
    #       TF_BACKEND_REGION: ${{ secrets.TF_BACKEND_REGION }}
    #     run: |
    #       terraform init -reconfigure \
    #         -backend-config="bucket=${TF_BACKEND_BUCKET}" \
    #         -backend-config="key=${TF_BACKEND_KEY}" \
    #         -backend-config="region=${TF_BACKEND_REGION}"
      - name: Get Current Add-on Versions
        if: env.UPGRADE_NEEDED == 'true'
        run: |
            echo "🔍 Fetching current add-on versions for cluster: $CLUSTER_NAME"

            CORE_DNS_VERSION=$(aws eks describe-addon \
                --cluster-name "$CLUSTER_NAME" \
                --addon-name coredns \
                --region "$REGION" | jq -r '.addon.addonVersion')

            VPC_CNI_VERSION=$(aws eks describe-addon \
                --cluster-name "$CLUSTER_NAME" \
                --addon-name vpc-cni \
                --region "$REGION" | jq -r '.addon.addonVersion')

            KUBE_PROXY_VERSION=$(aws eks describe-addon \
                --cluster-name "$CLUSTER_NAME" \
                --addon-name kube-proxy \
                --region "$REGION" | jq -r '.addon.addonVersion')

            echo "CORE_DNS_VERSION=$CORE_DNS_VERSION" >> $GITHUB_ENV
            echo "VPC_CNI_VERSION=$VPC_CNI_VERSION" >> $GITHUB_ENV
            echo "KUBE_PROXY_VERSION=$KUBE_PROXY_VERSION" >> $GITHUB_ENV
            echo "✅ Exported current add-on versions"

      - name: Terraform Plan
        if: env.UPGRADE_NEEDED == 'true'
        id: plan
        working-directory: ${{ env.TF_DIR }}
        continue-on-error: true
        run: |
          terraform plan \
            -var="eks_version=${LATEST_VERSION}" \
            -var="coredns_v=${CORE_DNS_VERSION}" \
            -var="vpc_cni_v=${VPC_CNI_VERSION}" \
            -var="kube_proxy_v=${KUBE_PROXY_VERSION}" -no-color  > tfplan.txt
          echo "PLAN_STATUS=$?" >> $GITHUB_ENV

      - name: Prepare Summary + Plan Output
        if: env.UPGRADE_NEEDED == 'true'
        working-directory: ${{ env.TF_DIR }}
        run: |
          if [ "${{ env.PLAN_STATUS }}" -eq 0 ]; then
            echo "✅ Terraform plan succeeded" > plan_comment.txt
          else
            echo "❌ Terraform plan failed" > plan_comment.txt
          fi
          echo '' >> plan_comment.txt
          echo '```hcl' >> plan_comment.txt
          cat tfplan.txt >> plan_comment.txt
          echo '```' >> plan_comment.txt

      - name: Create Pull Request
        if: env.UPGRADE_NEEDED == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
            commit-message: "chore: bump EKS version to ${LATEST_VERSION}"
            branch: eks/upgrade-to-${{ env.LATEST_VERSION }}
            title: "chore: Upgrade EKS from ${{ env.CURRENT_VERSION }} to ${{ env.LATEST_VERSION }}"
            body: |
              This PR was automatically created to upgrade the EKS cluster from version `${{ env.CURRENT_VERSION }}` to `${{ env.LATEST_VERSION }}`.
  
              - Please review 'terraform plan' before merging.
              - Once merged, GitHub Actions will automatically upgrade the cluster.
            labels: |
              type: infra-change
              needs-approval
            delete-branch: true