name: EKS Cluster Provisioning In AWS
on:
    push:
      branches:
      - main
      paths:
      - regions/us-east-1**
    pull_request:
      branches:
      - main
      paths:
      - regions/us-east-1**
env:
 # verbosity setting for Terraform logs
 TF_LOG: INFO
 EKS_VERSION: "1.32"
 CORE_DNS: "1.11.4"
 KUBE_PROXY: "1.32.5"
 VPC_CNI: "1.19.6"
 # Terraform Backed Configuration
 TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
 TF_BACKEND_KEY: ${{ secrets.TF_BACKEND_KEY }}
 TF_BACKEND_REGION: ${{ secrets.TF_BACKEND_REGION }}
 # Credentials for deployment to AWS
 AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
 AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
 terraform:
   name: "Terraform Infrastructure Change Management"
   runs-on: ubuntu-latest
   defaults:
     run:
       shell: bash
       # We keep Terraform files in the terraform directory.
       working-directory: ./regions/us-east-1
   steps:
     - name: Checkout the repository to the runner
       uses: actions/checkout@v2
 
     - name: Setup Terraform with specified version on the runner
       uses: hashicorp/setup-terraform@v2
       with:
         terraform_version: 1.5.7
    
     - name: Terraform Init with Dynamic Backend Config
       id: init

       run: |
           terraform init \
             -backend-config="bucket=${TF_BACKEND_BUCKET}" \
             -backend-config="key=${TF_BACKEND_KEY}" \
             -backend-config="region=${TF_BACKEND_REGION}"
       env:
           TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
           TF_BACKEND_KEY: ${{ secrets.TF_BACKEND_KEY }}
           TF_BACKEND_REGION: ${{ secrets.TF_BACKEND_REGION }}
 
     - name: Terraform format
       id: fmt
       run: terraform fmt -check
    
     - name: Terraform validate
       id: validate
       run: terraform validate
 
     - name: Terraform plan
       id: plan
       if: github.event_name == 'pull_request'
       run: terraform plan -no-color -input=false -var="eks_version=${EKS_VERSION}" -var="coredns_v=${CORE_DNS}" -var="vpc_cni_v=${VPC_CNI}" -var="kube_proxy_v=${KUBE_PROXY}"
       continue-on-error: true
    
     - uses: actions/github-script@v6
       if: github.event_name == 'pull_request'
       env:
         PLAN: "us-region\n${{ steps.plan.outputs.stdout }}"
       with:
         script: |
           const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
           #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
           #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
           #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
 
           <details><summary>Show Plan</summary>
 
           \`\`\`\n
           ${process.env.PLAN}
           \`\`\`
 
           </details>
           *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
 
           github.rest.issues.createComment({
             issue_number: context.issue.number,
             owner: context.repo.owner,
             repo: context.repo.repo,
             body: output
           })
 
     - name: Terraform Plan Status
       if: steps.plan.outcome == 'failure'
       run: exit 1
    
     - name: List Directory
       run: ls -ltrh
 
     - name: Terraform Apply
       if: github.ref == 'refs/heads/main' && github.event_name == 'push'
       run: terraform apply -auto-approve -input=false -var="eks_version=${EKS_VERSION}"