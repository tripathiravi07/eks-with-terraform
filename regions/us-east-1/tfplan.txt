module.eks_cluster.data.aws_caller_identity.current: Reading...
module.eks_cluster.data.aws_caller_identity.current: Read complete after 0s [id=053097998829]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform planned the following actions, but then encountered a problem:

  # module.eks_cluster.data.aws_eks_cluster.cluster-sg will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_eks_cluster" "cluster-sg" {
      + access_config             = (known after apply)
      + arn                       = (known after apply)
      + certificate_authority     = (known after apply)
      + cluster_id                = (known after apply)
      + compute_config            = (known after apply)
      + created_at                = (known after apply)
      + enabled_cluster_log_types = (known after apply)
      + endpoint                  = (known after apply)
      + id                        = (known after apply)
      + identity                  = (known after apply)
      + kubernetes_network_config = (known after apply)
      + name                      = "eks-with-terraform"
      + outpost_config            = (known after apply)
      + platform_version          = (known after apply)
      + remote_network_config     = (known after apply)
      + role_arn                  = (known after apply)
      + status                    = (known after apply)
      + storage_config            = (known after apply)
      + tags                      = (known after apply)
      + upgrade_policy            = (known after apply)
      + version                   = (known after apply)
      + vpc_config                = (known after apply)
      + zonal_shift_config        = (known after apply)
    }

  # module.eks_cluster.data.aws_eks_cluster.default will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_eks_cluster" "default" {
      + access_config             = (known after apply)
      + arn                       = (known after apply)
      + certificate_authority     = (known after apply)
      + cluster_id                = (known after apply)
      + compute_config            = (known after apply)
      + created_at                = (known after apply)
      + enabled_cluster_log_types = (known after apply)
      + endpoint                  = (known after apply)
      + id                        = (known after apply)
      + identity                  = (known after apply)
      + kubernetes_network_config = (known after apply)
      + name                      = "eks-with-terraform"
      + outpost_config            = (known after apply)
      + platform_version          = (known after apply)
      + remote_network_config     = (known after apply)
      + role_arn                  = (known after apply)
      + status                    = (known after apply)
      + storage_config            = (known after apply)
      + tags                      = (known after apply)
      + upgrade_policy            = (known after apply)
      + version                   = (known after apply)
      + vpc_config                = (known after apply)
      + zonal_shift_config        = (known after apply)
    }

  # module.eks_cluster.data.aws_eks_cluster.karpenter will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_eks_cluster" "karpenter" {
      + access_config             = (known after apply)
      + arn                       = (known after apply)
      + certificate_authority     = (known after apply)
      + cluster_id                = (known after apply)
      + compute_config            = (known after apply)
      + created_at                = (known after apply)
      + enabled_cluster_log_types = (known after apply)
      + endpoint                  = (known after apply)
      + id                        = (known after apply)
      + identity                  = (known after apply)
      + kubernetes_network_config = (known after apply)
      + name                      = "eks-with-terraform"
      + outpost_config            = (known after apply)
      + platform_version          = (known after apply)
      + remote_network_config     = (known after apply)
      + role_arn                  = (known after apply)
      + status                    = (known after apply)
      + storage_config            = (known after apply)
      + tags                      = (known after apply)
      + upgrade_policy            = (known after apply)
      + version                   = (known after apply)
      + vpc_config                = (known after apply)
      + zonal_shift_config        = (known after apply)
    }

  # module.eks_cluster.data.tls_certificate.default will be read during apply
  # (config refers to values not yet known)
 <= data "tls_certificate" "default" {
      + certificates = (known after apply)
      + id           = (known after apply)
      + url          = (known after apply)
    }

  # module.eks_cluster.data.tls_certificate.karpenter_oidc will be read during apply
  # (config refers to values not yet known)
 <= data "tls_certificate" "karpenter_oidc" {
      + certificates = (known after apply)
      + id           = (known after apply)
      + url          = (known after apply)
    }

  # module.eks_cluster.aws_eks_access_entry.karpenter will be created
  + resource "aws_eks_access_entry" "karpenter" {
      + access_entry_arn  = (known after apply)
      + cluster_name      = "eks-with-terraform"
      + created_at        = (known after apply)
      + id                = (known after apply)
      + kubernetes_groups = (known after apply)
      + modified_at       = (known after apply)
      + principal_arn     = (known after apply)
      + tags_all          = (known after apply)
      + type              = "EC2_LINUX"
      + user_name         = (known after apply)
    }

  # module.eks_cluster.aws_eks_cluster.eks-terraform will be created
  + resource "aws_eks_cluster" "eks-terraform" {
      + arn                           = (known after apply)
      + bootstrap_self_managed_addons = true
      + certificate_authority         = (known after apply)
      + cluster_id                    = (known after apply)
      + created_at                    = (known after apply)
      + enabled_cluster_log_types     = [
          + "api",
          + "audit",
          + "authenticator",
          + "controllerManager",
          + "scheduler",
        ]
      + endpoint                      = (known after apply)
      + id                            = (known after apply)
      + identity                      = (known after apply)
      + name                          = "eks-with-terraform"
      + platform_version              = (known after apply)
      + role_arn                      = (known after apply)
      + status                        = (known after apply)
      + tags_all                      = (known after apply)
      + version                       = "1.33"

      + access_config {
          + authentication_mode                         = "API"
          + bootstrap_cluster_creator_admin_permissions = true
        }

      + encryption_config {
          + resources = [
              + "secrets",
            ]

          + provider {
              + key_arn = (known after apply)
            }
        }

      + kubernetes_network_config (known after apply)

      + upgrade_policy (known after apply)

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = false
          + endpoint_public_access    = true
          + public_access_cidrs       = (known after apply)
          + subnet_ids                = (known after apply)
          + vpc_id                    = (known after apply)
        }
    }

  # module.eks_cluster.aws_eks_node_group.eks-ng-1 will be created
  + resource "aws_eks_node_group" "eks-ng-1" {
      + ami_type               = (known after apply)
      + arn                    = (known after apply)
      + capacity_type          = (known after apply)
      + cluster_name           = "eks-with-terraform"
      + disk_size              = (known after apply)
      + id                     = (known after apply)
      + instance_types         = [
          + "t3a.xlarge",
        ]
      + node_group_name        = "eks-ng-2"
      + node_group_name_prefix = (known after apply)
      + node_role_arn          = (known after apply)
      + release_version        = (known after apply)
      + resources              = (known after apply)
      + status                 = (known after apply)
      + subnet_ids             = (known after apply)
      + tags_all               = (known after apply)
      + version                = (known after apply)

      + node_repair_config (known after apply)

      + scaling_config {
          + desired_size = 2
          + max_size     = 2
          + min_size     = 1
        }

      + update_config {
          + max_unavailable = 2
        }
    }

  # module.eks_cluster.aws_iam_instance_profile.karpenter_node_instance_profile will be created
  + resource "aws_iam_instance_profile" "karpenter_node_instance_profile" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "KarpenterNodeInstanceProfile-eks-with-terraform"
      + name_prefix = (known after apply)
      + path        = "/"
      + role        = "KarpenterNodeRole-eks-with-terraform"
      + tags_all    = (known after apply)
      + unique_id   = (known after apply)
    }

  # module.eks_cluster.aws_iam_openid_connect_provider.default will be created
  + resource "aws_iam_openid_connect_provider" "default" {
      + arn             = (known after apply)
      + client_id_list  = [
          + "sts.amazonaws.com",
        ]
      + id              = (known after apply)
      + tags_all        = (known after apply)
      + thumbprint_list = (known after apply)
      + url             = (known after apply)
    }

  # module.eks_cluster.aws_iam_policy.aws_lb_controller will be created
  + resource "aws_iam_policy" "aws_lb_controller" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + description      = "Policy for AWS Load Balancer Controller"
      + id               = (known after apply)
      + name             = "AWSLoadBalancerControllerIAMPolicyEKSTerraform"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "iam:CreateServiceLinkedRole",
                        ]
                      + Condition = {
                          + StringEquals = {
                              + "iam:AWSServiceName" = "elasticloadbalancing.amazonaws.com"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = "*"
                    },
                  + {
                      + Action   = [
                          + "ec2:DescribeAccountAttributes",
                          + "ec2:DescribeAddresses",
                          + "ec2:DescribeAvailabilityZones",
                          + "ec2:DescribeInternetGateways",
                          + "ec2:DescribeVpcs",
                          + "ec2:DescribeVpcPeeringConnections",
                          + "ec2:DescribeSubnets",
                          + "ec2:DescribeSecurityGroups",
                          + "ec2:DescribeInstances",
                          + "ec2:DescribeNetworkInterfaces",
                          + "ec2:DescribeTags",
                          + "ec2:GetCoipPoolUsage",
                          + "ec2:DescribeCoipPools",
                          + "ec2:GetSecurityGroupsForVpc",
                          + "ec2:DescribeIpamPools",
                          + "elasticloadbalancing:DescribeLoadBalancers",
                          + "elasticloadbalancing:DescribeLoadBalancerAttributes",
                          + "elasticloadbalancing:DescribeListeners",
                          + "elasticloadbalancing:DescribeListenerCertificates",
                          + "elasticloadbalancing:DescribeSSLPolicies",
                          + "elasticloadbalancing:DescribeRules",
                          + "elasticloadbalancing:DescribeTargetGroups",
                          + "elasticloadbalancing:DescribeTargetGroupAttributes",
                          + "elasticloadbalancing:DescribeTargetHealth",
                          + "elasticloadbalancing:DescribeTags",
                          + "elasticloadbalancing:DescribeTrustStores",
                          + "elasticloadbalancing:DescribeListenerAttributes",
                          + "elasticloadbalancing:DescribeCapacityReservation",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = [
                          + "cognito-idp:DescribeUserPoolClient",
                          + "acm:ListCertificates",
                          + "acm:DescribeCertificate",
                          + "iam:ListServerCertificates",
                          + "iam:GetServerCertificate",
                          + "waf-regional:GetWebACL",
                          + "waf-regional:GetWebACLForResource",
                          + "waf-regional:AssociateWebACL",
                          + "waf-regional:DisassociateWebACL",
                          + "wafv2:GetWebACL",
                          + "wafv2:GetWebACLForResource",
                          + "wafv2:AssociateWebACL",
                          + "wafv2:DisassociateWebACL",
                          + "shield:GetSubscriptionState",
                          + "shield:DescribeProtection",
                          + "shield:CreateProtection",
                          + "shield:DeleteProtection",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = [
                          + "ec2:AuthorizeSecurityGroupIngress",
                          + "ec2:RevokeSecurityGroupIngress",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = [
                          + "ec2:CreateSecurityGroup",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action    = [
                          + "ec2:CreateTags",
                        ]
                      + Condition = {
                          + Null         = {
                              + "aws:RequestTag/elbv2.k8s.aws/cluster" = "false"
                            }
                          + StringEquals = {
                              + "ec2:CreateAction" = "CreateSecurityGroup"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = "arn:aws:ec2:*:*:security-group/*"
                    },
                  + {
                      + Action    = [
                          + "ec2:CreateTags",
                          + "ec2:DeleteTags",
                        ]
                      + Condition = {
                          + Null = {
                              + "aws:RequestTag/elbv2.k8s.aws/cluster"  = "true"
                              + "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = "arn:aws:ec2:*:*:security-group/*"
                    },
                  + {
                      + Action    = [
                          + "ec2:AuthorizeSecurityGroupIngress",
                          + "ec2:RevokeSecurityGroupIngress",
                          + "ec2:DeleteSecurityGroup",
                        ]
                      + Condition = {
                          + Null = {
                              + "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = "*"
                    },
                  + {
                      + Action    = [
                          + "elasticloadbalancing:CreateLoadBalancer",
                          + "elasticloadbalancing:CreateTargetGroup",
                        ]
                      + Condition = {
                          + Null = {
                              + "aws:RequestTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = "*"
                    },
                  + {
                      + Action   = [
                          + "elasticloadbalancing:CreateListener",
                          + "elasticloadbalancing:DeleteListener",
                          + "elasticloadbalancing:CreateRule",
                          + "elasticloadbalancing:DeleteRule",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action    = [
                          + "elasticloadbalancing:AddTags",
                          + "elasticloadbalancing:RemoveTags",
                        ]
                      + Condition = {
                          + Null = {
                              + "aws:RequestTag/elbv2.k8s.aws/cluster"  = "true"
                              + "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = [
                          + "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                          + "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                          + "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*",
                        ]
                    },
                  + {
                      + Action   = [
                          + "elasticloadbalancing:AddTags",
                          + "elasticloadbalancing:RemoveTags",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                          + "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                          + "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
                          + "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*",
                        ]
                    },
                  + {
                      + Action    = [
                          + "elasticloadbalancing:ModifyLoadBalancerAttributes",
                          + "elasticloadbalancing:SetIpAddressType",
                          + "elasticloadbalancing:SetSecurityGroups",
                          + "elasticloadbalancing:SetSubnets",
                          + "elasticloadbalancing:DeleteLoadBalancer",
                          + "elasticloadbalancing:ModifyTargetGroup",
                          + "elasticloadbalancing:ModifyTargetGroupAttributes",
                          + "elasticloadbalancing:DeleteTargetGroup",
                          + "elasticloadbalancing:ModifyListenerAttributes",
                          + "elasticloadbalancing:ModifyCapacityReservation",
                          + "elasticloadbalancing:ModifyIpPools",
                        ]
                      + Condition = {
                          + Null = {
                              + "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = "*"
                    },
                  + {
                      + Action    = [
                          + "elasticloadbalancing:AddTags",
                        ]
                      + Condition = {
                          + Null         = {
                              + "aws:RequestTag/elbv2.k8s.aws/cluster" = "false"
                            }
                          + StringEquals = {
                              + "elasticloadbalancing:CreateAction" = [
                                  + "CreateTargetGroup",
                                  + "CreateLoadBalancer",
                                ]
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = [
                          + "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                          + "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                          + "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*",
                        ]
                    },
                  + {
                      + Action   = [
                          + "elasticloadbalancing:RegisterTargets",
                          + "elasticloadbalancing:DeregisterTargets",
                        ]
                      + Effect   = "Allow"
                      + Resource = "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
                    },
                  + {
                      + Action   = [
                          + "elasticloadbalancing:SetWebAcl",
                          + "elasticloadbalancing:ModifyListener",
                          + "elasticloadbalancing:AddListenerCertificates",
                          + "elasticloadbalancing:RemoveListenerCertificates",
                          + "elasticloadbalancing:ModifyRule",
                          + "elasticloadbalancing:SetRulePriorities",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # module.eks_cluster.aws_iam_policy.karpenter_controller_policy will be created
  + resource "aws_iam_policy" "karpenter_controller_policy" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + description      = "Policy for Karpenter Controller"
      + id               = (known after apply)
      + name             = "KarpenterControllerIAMPolicyEKSTerraform"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ec2:RunInstances",
                          + "ec2:CreateFleet",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "arn:aws:ec2:us-east-1::image/*",
                          + "arn:aws:ec2:us-east-1::snapshot/*",
                          + "arn:aws:ec2:us-east-1:*:security-group/*",
                          + "arn:aws:ec2:us-east-1:*:subnet/*",
                          + "arn:aws:ec2:us-east-1:*:capacity-reservation/*",
                        ]
                      + Sid      = "AllowScopedEC2InstanceAccessActions"
                    },
                  + {
                      + Action    = [
                          + "ec2:RunInstances",
                          + "ec2:CreateFleet",
                        ]
                      + Condition = {
                          + StringEquals = {
                              + "aws:ResourceTag/kubernetes.io/cluster/eks-with-terraform" = "owned"
                            }
                          + StringLike   = {
                              + "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = "arn:aws:ec2:us-east-1:*:launch-template/*"
                      + Sid       = "AllowScopedEC2LaunchTemplateAccessActions"
                    },
                  + {
                      + Action    = [
                          + "ec2:RunInstances",
                          + "ec2:CreateFleet",
                          + "ec2:CreateLaunchTemplate",
                        ]
                      + Condition = {
                          + StringEquals = {
                              + "aws:RequestTag/eks:eks-cluster-name"                     = "eks-with-terraform"
                              + "aws:RequestTag/kubernetes.io/cluster/eks-with-terraform" = "owned"
                            }
                          + StringLike   = {
                              + "aws:RequestTag/karpenter.sh/nodepool" = "*"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = [
                          + "arn:aws:ec2:us-east-1:*:fleet/*",
                          + "arn:aws:ec2:us-east-1:*:instance/*",
                          + "arn:aws:ec2:us-east-1:*:volume/*",
                          + "arn:aws:ec2:us-east-1:*:network-interface/*",
                          + "arn:aws:ec2:us-east-1:*:launch-template/*",
                          + "arn:aws:ec2:us-east-1:*:spot-instances-request/*",
                          + "arn:aws:ec2:us-east-1:*:capacity-reservation/*",
                        ]
                      + Sid       = "AllowScopedEC2InstanceActionsWithTags"
                    },
                  + {
                      + Action    = "ec2:CreateTags"
                      + Condition = {
                          + StringEquals = {
                              + "aws:RequestTag/eks:eks-cluster-name"                     = "eks-with-terraform"
                              + "aws:RequestTag/kubernetes.io/cluster/eks-with-terraform" = "owned"
                              + "ec2:CreateAction"                                        = [
                                  + "RunInstances",
                                  + "CreateFleet",
                                  + "CreateLaunchTemplate",
                                ]
                            }
                          + StringLike   = {
                              + "aws:RequestTag/karpenter.sh/nodepool" = "*"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = [
                          + "arn:aws:ec2:us-east-1:*:fleet/*",
                          + "arn:aws:ec2:us-east-1:*:instance/*",
                          + "arn:aws:ec2:us-east-1:*:volume/*",
                          + "arn:aws:ec2:us-east-1:*:network-interface/*",
                          + "arn:aws:ec2:us-east-1:*:launch-template/*",
                          + "arn:aws:ec2:us-east-1:*:spot-instances-request/*",
                        ]
                      + Sid       = "AllowScopedResourceCreationTagging"
                    },
                  + {
                      + Action    = "ec2:CreateTags"
                      + Condition = {
                          + "ForAllValues:StringEquals" = {
                              + "aws:TagKeys" = [
                                  + "eks:eks-cluster-name",
                                  + "karpenter.sh/nodeclaim",
                                  + "Name",
                                ]
                            }
                          + StringEquals                = {
                              + "aws:ResourceTag/kubernetes.io/cluster/eks-with-terraform" = "owned"
                            }
                          + StringEqualsIfExists        = {
                              + "aws:RequestTag/eks:eks-cluster-name" = "eks-with-terraform"
                            }
                          + StringLike                  = {
                              + "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = "arn:aws:ec2:us-east-1:*:instance/*"
                      + Sid       = "AllowScopedResourceTagging"
                    },
                  + {
                      + Action    = [
                          + "ec2:TerminateInstances",
                          + "ec2:DeleteLaunchTemplate",
                        ]
                      + Condition = {
                          + StringEquals = {
                              + "aws:ResourceTag/kubernetes.io/cluster/eks-with-terraform" = "owned"
                            }
                          + StringLike   = {
                              + "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = [
                          + "arn:aws:ec2:us-east-1:*:instance/*",
                          + "arn:aws:ec2:us-east-1:*:launch-template/*",
                        ]
                      + Sid       = "AllowScopedDeletion"
                    },
                  + {
                      + Action    = [
                          + "ec2:DescribeCapacityReservations",
                          + "ec2:DescribeImages",
                          + "ec2:DescribeInstances",
                          + "ec2:DescribeInstanceTypeOfferings",
                          + "ec2:DescribeInstanceTypes",
                          + "ec2:DescribeLaunchTemplates",
                          + "ec2:DescribeSecurityGroups",
                          + "ec2:DescribeSpotPriceHistory",
                          + "ec2:DescribeSubnets",
                        ]
                      + Condition = {
                          + StringEquals = {
                              + "aws:RequestedRegion" = "us-east-1"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = "*"
                      + Sid       = "AllowRegionalReadActions"
                    },
                  + {
                      + Action   = "ssm:GetParameter"
                      + Effect   = "Allow"
                      + Resource = "arn:aws:ssm:us-east-1::parameter/aws/service/*"
                      + Sid      = "AllowSSMReadActions"
                    },
                  + {
                      + Action   = "pricing:GetProducts"
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = "AllowPricingReadActions"
                    },
                  + {
                      + Action   = [
                          + "sqs:DeleteMessage",
                          + "sqs:GetQueueUrl",
                          + "sqs:ReceiveMessage",
                        ]
                      + Effect   = "Allow"
                      + Resource = "arn:aws:sqs:us-east-1:053097998829:eks-with-terraform"
                      + Sid      = "AllowInterruptionQueueActions"
                    },
                  + {
                      + Action    = "iam:PassRole"
                      + Condition = {
                          + StringEquals = {
                              + "iam:PassedToService" = [
                                  + "ec2.amazonaws.com",
                                  + "ec2.amazonaws.com.cn",
                                ]
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = "arn:aws:iam::053097998829:role/KarpenterNodeRole-eks-with-terraform"
                      + Sid       = "AllowPassingInstanceRole"
                    },
                  + {
                      + Action    = [
                          + "iam:CreateInstanceProfile",
                        ]
                      + Condition = {
                          + StringEquals = {
                              + "aws:RequestTag/eks:eks-cluster-name"                     = "eks-with-terraform"
                              + "aws:RequestTag/kubernetes.io/cluster/eks-with-terraform" = "owned"
                              + "aws:RequestTag/topology.kubernetes.io/region"            = "us-east-1"
                            }
                          + StringLike   = {
                              + "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = "arn:aws:iam::053097998829:instance-profile/*"
                      + Sid       = "AllowScopedInstanceProfileCreationActions"
                    },
                  + {
                      + Action    = [
                          + "iam:TagInstanceProfile",
                        ]
                      + Condition = {
                          + StringEquals = {
                              + "aws:RequestTag/eks:eks-cluster-name"                      = "eks-with-terraform"
                              + "aws:RequestTag/kubernetes.io/cluster/eks-with-terraform"  = "owned"
                              + "aws:RequestTag/topology.kubernetes.io/region"             = "us-east-1"
                              + "aws:ResourceTag/kubernetes.io/cluster/eks-with-terraform" = "owned"
                              + "aws:ResourceTag/topology.kubernetes.io/region"            = "us-east-1"
                            }
                          + StringLike   = {
                              + "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass"  = "*"
                              + "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = "arn:aws:iam::053097998829:instance-profile/*"
                      + Sid       = "AllowScopedInstanceProfileTagActions"
                    },
                  + {
                      + Action    = [
                          + "iam:AddRoleToInstanceProfile",
                          + "iam:RemoveRoleFromInstanceProfile",
                          + "iam:DeleteInstanceProfile",
                        ]
                      + Condition = {
                          + StringEquals = {
                              + "aws:ResourceTag/kubernetes.io/cluster/eks-with-terraform" = "owned"
                              + "aws:ResourceTag/topology.kubernetes.io/region"            = "us-east-1"
                            }
                          + StringLike   = {
                              + "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = "arn:aws:iam::053097998829:instance-profile/*"
                      + Sid       = "AllowScopedInstanceProfileActions"
                    },
                  + {
                      + Action   = "iam:GetInstanceProfile"
                      + Effect   = "Allow"
                      + Resource = "arn:aws:iam::053097998829:instance-profile/*"
                      + Sid      = "AllowInstanceProfileReadActions"
                    },
                  + {
                      + Action   = "eks:DescribeCluster"
                      + Effect   = "Allow"
                      + Resource = "arn:aws:eks:us-east-1:053097998829:cluster/eks-with-terraform"
                      + Sid      = "AllowAPIServerEndpointDiscovery"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # module.eks_cluster.aws_iam_role.aws-lbc-irsa-role will be created
  + resource "aws_iam_role" "aws-lbc-irsa-role" {
      + arn                   = (known after apply)
      + assume_role_policy    = (known after apply)
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "aws-lbc-irsa-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.eks_cluster.aws_iam_role.cluster will be created
  + resource "aws_iam_role" "cluster" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "sts:AssumeRole",
                          + "sts:TagSession",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "eks-cluster-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.eks_cluster.aws_iam_role.karpenter-controller-irsa-role will be created
  + resource "aws_iam_role" "karpenter-controller-irsa-role" {
      + arn                   = (known after apply)
      + assume_role_policy    = (known after apply)
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "karpenter-controller-irsa-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.eks_cluster.aws_iam_role.karpenter_node will be created
  + resource "aws_iam_role" "karpenter_node" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "KarpenterNodeRole-eks-with-terraform"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.eks_cluster.aws_iam_role.node-role will be created
  + resource "aws_iam_role" "node-role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "eks-node-iam-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.eks_cluster.aws_iam_role.observability_irsa will be created
  + resource "aws_iam_role" "observability_irsa" {
      + arn                   = (known after apply)
      + assume_role_policy    = (known after apply)
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "observability_irsa-irsa-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.eks_cluster.aws_iam_role_policy_attachment.AmazonEC2ContainerRegistryReadOnly will be created
  + resource "aws_iam_role_policy_attachment" "AmazonEC2ContainerRegistryReadOnly" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = "eks-node-iam-role"
    }

  # module.eks_cluster.aws_iam_role_policy_attachment.AmazonEKSWorkerNodePolicy will be created
  + resource "aws_iam_role_policy_attachment" "AmazonEKSWorkerNodePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = "eks-node-iam-role"
    }

  # module.eks_cluster.aws_iam_role_policy_attachment.AmazonEKS_CNI_Policy will be created
  + resource "aws_iam_role_policy_attachment" "AmazonEKS_CNI_Policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = "eks-node-iam-role"
    }

  # module.eks_cluster.aws_iam_role_policy_attachment.attach_karpenter_controller will be created
  + resource "aws_iam_role_policy_attachment" "attach_karpenter_controller" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "karpenter-controller-irsa-role"
    }

  # module.eks_cluster.aws_iam_role_policy_attachment.attach_lb_controller will be created
  + resource "aws_iam_role_policy_attachment" "attach_lb_controller" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "aws-lbc-irsa-role"
    }

  # module.eks_cluster.aws_iam_role_policy_attachment.eks_cluster_policy will be created
  + resource "aws_iam_role_policy_attachment" "eks_cluster_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = "eks-cluster-role"
    }

  # module.eks_cluster.aws_iam_role_policy_attachment.node_policy["arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"] will be created
  + resource "aws_iam_role_policy_attachment" "node_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = "KarpenterNodeRole-eks-with-terraform"
    }

  # module.eks_cluster.aws_iam_role_policy_attachment.node_policy["arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"] will be created
  + resource "aws_iam_role_policy_attachment" "node_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = "KarpenterNodeRole-eks-with-terraform"
    }

  # module.eks_cluster.aws_iam_role_policy_attachment.node_policy["arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"] will be created
  + resource "aws_iam_role_policy_attachment" "node_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = "KarpenterNodeRole-eks-with-terraform"
    }

  # module.eks_cluster.aws_iam_role_policy_attachment.node_policy["arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"] will be created
  + resource "aws_iam_role_policy_attachment" "node_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      + role       = "KarpenterNodeRole-eks-with-terraform"
    }

  # module.eks_cluster.aws_iam_role_policy_attachment.observability_attach will be created
  + resource "aws_iam_role_policy_attachment" "observability_attach" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
      + role       = "observability_irsa-irsa-role"
    }

  # module.eks_cluster.aws_kms_key.eks-with-terraform will be created
  + resource "aws_kms_key" "eks-with-terraform" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + deletion_window_in_days            = 10
      + description                        = "KMS key for encrypting data"
      + enable_key_rotation                = true
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = (known after apply)
      + policy                             = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "kms:*"
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::053097998829:root"
                        }
                      + Resource  = "*"
                      + Sid       = "Enable IAM user permissions"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + rotation_period_in_days            = (known after apply)
      + tags                               = {
          + "Environment" = "dev"
          + "Name"        = "example-kms-key"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "Name"        = "example-kms-key"
        }
    }

  # module.eks_cluster.aws_security_group.karpenter_sg will be created
  + resource "aws_security_group" "karpenter_sg" {
      + arn                    = (known after apply)
      + description            = "Security group for Karpenter-managed nodes"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow all outbound traffic"
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
            },
          + {
              + cidr_blocks      = [
                  + "10.0.0.0/16",
                ]
              + description      = "Allow all VPC traffic"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = "Allow internal VPC traffic"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 0
            },
        ]
      + name                   = "karpenter-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name"                   = "karpenter-sg"
          + "karpenter.sh/discovery" = "eks-with-terraform"
        }
      + tags_all               = {
          + "Name"                   = "karpenter-sg"
          + "karpenter.sh/discovery" = "eks-with-terraform"
        }
      + vpc_id                 = (known after apply)
    }

  # module.eks_cluster.aws_sqs_queue.karpenter_interruption_queue will be created
  + resource "aws_sqs_queue" "karpenter_interruption_queue" {
      + arn                               = (known after apply)
      + content_based_deduplication       = false
      + deduplication_scope               = (known after apply)
      + delay_seconds                     = 0
      + fifo_queue                        = false
      + fifo_throughput_limit             = (known after apply)
      + id                                = (known after apply)
      + kms_data_key_reuse_period_seconds = 0
      + max_message_size                  = 262144
      + message_retention_seconds         = 345600
      + name                              = "eks-with-terraform"
      + name_prefix                       = (known after apply)
      + policy                            = (known after apply)
      + receive_wait_time_seconds         = 0
      + redrive_allow_policy              = (known after apply)
      + redrive_policy                    = (known after apply)
      + sqs_managed_sse_enabled           = true
      + tags                              = {
          + "karpenter.sh/discovery" = "eks-with-terraform"
        }
      + tags_all                          = {
          + "karpenter.sh/discovery" = "eks-with-terraform"
        }
      + url                               = (known after apply)
      + visibility_timeout_seconds        = 30
    }

  # module.eks_cluster.helm_release.aws_load_balancer_controller will be created
  + resource "helm_release" "aws_load_balancer_controller" {
      + atomic                     = false
      + chart                      = "aws-load-balancer-controller"
      + cleanup_on_fail            = false
      + create_namespace           = false
      + dependency_update          = false
      + disable_crd_hooks          = false
      + disable_openapi_validation = false
      + disable_webhooks           = false
      + force_update               = false
      + id                         = (known after apply)
      + lint                       = false
      + manifest                   = (known after apply)
      + max_history                = 0
      + metadata                   = (known after apply)
      + name                       = "aws-load-balancer-controller"
      + namespace                  = "kube-system"
      + pass_credentials           = false
      + recreate_pods              = false
      + render_subchart_notes      = true
      + replace                    = false
      + repository                 = "https://aws.github.io/eks-charts"
      + reset_values               = false
      + reuse_values               = false
      + skip_crds                  = false
      + status                     = "deployed"
      + timeout                    = 300
      + verify                     = false
      + version                    = "1.13.3"
      + wait                       = true
      + wait_for_jobs              = false

      + set {
          + name  = "clusterName"
          + value = "eks-with-terraform"
            # (1 unchanged attribute hidden)
        }
      + set {
          + name  = "region"
          + value = "us-east-1"
            # (1 unchanged attribute hidden)
        }
      + set {
          + name  = "serviceAccount.create"
          + value = "false"
            # (1 unchanged attribute hidden)
        }
      + set {
          + name  = "serviceAccount.name"
          + value = "aws-load-balancer-controller"
            # (1 unchanged attribute hidden)
        }
      + set {
          + name  = "vpcId"
          + value = (known after apply)
            # (1 unchanged attribute hidden)
        }
    }

  # module.eks_cluster.helm_release.karpenter will be created
  + resource "helm_release" "karpenter" {
      + atomic                     = false
      + chart                      = "karpenter"
      + cleanup_on_fail            = false
      + create_namespace           = false
      + dependency_update          = false
      + disable_crd_hooks          = false
      + disable_openapi_validation = false
      + disable_webhooks           = false
      + force_update               = false
      + id                         = (known after apply)
      + lint                       = false
      + manifest                   = (known after apply)
      + max_history                = 0
      + metadata                   = (known after apply)
      + name                       = "karpenter"
      + namespace                  = "kube-system"
      + pass_credentials           = false
      + recreate_pods              = false
      + render_subchart_notes      = true
      + replace                    = false
      + repository                 = "oci://public.ecr.aws/karpenter"
      + reset_values               = false
      + reuse_values               = false
      + skip_crds                  = false
      + status                     = "deployed"
      + timeout                    = 300
      + verify                     = false
      + version                    = "1.5.1"
      + wait                       = true
      + wait_for_jobs              = false

      + set {
          + name  = "controller.env[0].name"
          + value = "AWS_REGION"
            # (1 unchanged attribute hidden)
        }
      + set {
          + name  = "controller.env[0].value"
          + value = "us-east-1"
            # (1 unchanged attribute hidden)
        }
      + set {
          + name  = "serviceAccount.create"
          + value = "false"
            # (1 unchanged attribute hidden)
        }
      + set {
          + name  = "serviceAccount.name"
          + value = "karpenter"
            # (1 unchanged attribute hidden)
        }
      + set {
          + name  = "settings.clusterName"
          + value = "eks-with-terraform"
            # (1 unchanged attribute hidden)
        }
      + set {
          + name  = "settings.interruptionQueue"
          + value = "eks-with-terraform"
            # (1 unchanged attribute hidden)
        }
    }

  # module.eks_cluster.kubernetes_service_account.aws_lb_controller_sa will be created
  + resource "kubernetes_service_account" "aws_lb_controller_sa" {
      + automount_service_account_token = true
      + default_secret_name             = (known after apply)
      + id                              = (known after apply)

      + metadata {
          + annotations      = (known after apply)
          + generation       = (known after apply)
          + name             = "aws-load-balancer-controller"
          + namespace        = "kube-system"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.eks_cluster.kubernetes_service_account.karpenter_controller_sa will be created
  + resource "kubernetes_service_account" "karpenter_controller_sa" {
      + automount_service_account_token = true
      + default_secret_name             = (known after apply)
      + id                              = (known after apply)

      + metadata {
          + annotations      = (known after apply)
          + generation       = (known after apply)
          + name             = "karpenter"
          + namespace        = "kube-system"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.vpc_network.aws_default_security_group.default will be created
  + resource "aws_default_security_group" "default" {
      + arn                    = (known after apply)
      + description            = (known after apply)
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # module.vpc_network.aws_eip.nat_eip will be created
  + resource "aws_eip" "nat_eip" {
      + allocation_id        = (known after apply)
      + arn                  = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + ipam_pool_id         = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + ptr_record           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags_all             = (known after apply)
      + vpc                  = (known after apply)
    }

  # module.vpc_network.aws_internet_gateway.eks-vpc-IGW will be created
  + resource "aws_internet_gateway" "eks-vpc-IGW" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "eks-vpc-terraform"
          + "team" = "devops"
        }
      + tags_all = {
          + "Name" = "eks-vpc-terraform"
          + "team" = "devops"
        }
      + vpc_id   = (known after apply)
    }

  # module.vpc_network.aws_nat_gateway.eks-NatGateway will be created
  + resource "aws_nat_gateway" "eks-NatGateway" {
      + allocation_id                      = (known after apply)
      + association_id                     = (known after apply)
      + connectivity_type                  = "public"
      + id                                 = (known after apply)
      + network_interface_id               = (known after apply)
      + private_ip                         = (known after apply)
      + public_ip                          = (known after apply)
      + secondary_private_ip_address_count = (known after apply)
      + secondary_private_ip_addresses     = (known after apply)
      + subnet_id                          = (known after apply)
      + tags                               = {
          + "Name" = "gw NAT"
        }
      + tags_all                           = {
          + "Name" = "gw NAT"
        }
    }

  # module.vpc_network.aws_route_table.private_rt will be created
  + resource "aws_route_table" "private_rt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
          + {
              + cidr_block                 = "10.0.0.0/16"
              + gateway_id                 = "local"
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "private-rt"
        }
      + tags_all         = {
          + "Name" = "private-rt"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc_network.aws_route_table.public_rt will be created
  + resource "aws_route_table" "public_rt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
          + {
              + cidr_block                 = "10.0.0.0/16"
              + gateway_id                 = "local"
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "public-rt"
        }
      + tags_all         = {
          + "Name" = "public-rt"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc_network.aws_route_table_association.private_subnet_association["3"] will be created
  + resource "aws_route_table_association" "private_subnet_association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc_network.aws_route_table_association.private_subnet_association["4"] will be created
  + resource "aws_route_table_association" "private_subnet_association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc_network.aws_route_table_association.private_subnet_association["5"] will be created
  + resource "aws_route_table_association" "private_subnet_association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc_network.aws_route_table_association.public_subnet_association["0"] will be created
  + resource "aws_route_table_association" "public_subnet_association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc_network.aws_route_table_association.public_subnet_association["1"] will be created
  + resource "aws_route_table_association" "public_subnet_association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc_network.aws_route_table_association.public_subnet_association["2"] will be created
  + resource "aws_route_table_association" "public_subnet_association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc_network.aws_subnet.eks-private-subnets["3"] will be created
  + resource "aws_subnet" "eks-private-subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.48.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name"                                     = "Private-3"
          + "karpenter.sh/discovery"                   = "eks-with-terraform"
          + "kubernetes.io/cluster/eks-with-terraform" = "owned"
          + "kubernetes.io/role/internal-elb"          = "1"
          + "team"                                     = "devops"
        }
      + tags_all                                       = {
          + "Name"                                     = "Private-3"
          + "karpenter.sh/discovery"                   = "eks-with-terraform"
          + "kubernetes.io/cluster/eks-with-terraform" = "owned"
          + "kubernetes.io/role/internal-elb"          = "1"
          + "team"                                     = "devops"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc_network.aws_subnet.eks-private-subnets["4"] will be created
  + resource "aws_subnet" "eks-private-subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.64.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name"                                     = "Private-4"
          + "karpenter.sh/discovery"                   = "eks-with-terraform"
          + "kubernetes.io/cluster/eks-with-terraform" = "owned"
          + "kubernetes.io/role/internal-elb"          = "1"
          + "team"                                     = "devops"
        }
      + tags_all                                       = {
          + "Name"                                     = "Private-4"
          + "karpenter.sh/discovery"                   = "eks-with-terraform"
          + "kubernetes.io/cluster/eks-with-terraform" = "owned"
          + "kubernetes.io/role/internal-elb"          = "1"
          + "team"                                     = "devops"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc_network.aws_subnet.eks-private-subnets["5"] will be created
  + resource "aws_subnet" "eks-private-subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.80.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name"                                     = "Private-5"
          + "karpenter.sh/discovery"                   = "eks-with-terraform"
          + "kubernetes.io/cluster/eks-with-terraform" = "owned"
          + "kubernetes.io/role/internal-elb"          = "1"
          + "team"                                     = "devops"
        }
      + tags_all                                       = {
          + "Name"                                     = "Private-5"
          + "karpenter.sh/discovery"                   = "eks-with-terraform"
          + "kubernetes.io/cluster/eks-with-terraform" = "owned"
          + "kubernetes.io/role/internal-elb"          = "1"
          + "team"                                     = "devops"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc_network.aws_subnet.eks-public-subnets["0"] will be created
  + resource "aws_subnet" "eks-public-subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.0.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name"                                     = "PublicSubnet-0"
          + "kubernetes.io/cluster/eks-with-terraform" = "owned"
          + "kubernetes.io/role/elb"                   = "1"
          + "team"                                     = "devops"
        }
      + tags_all                                       = {
          + "Name"                                     = "PublicSubnet-0"
          + "kubernetes.io/cluster/eks-with-terraform" = "owned"
          + "kubernetes.io/role/elb"                   = "1"
          + "team"                                     = "devops"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc_network.aws_subnet.eks-public-subnets["1"] will be created
  + resource "aws_subnet" "eks-public-subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.16.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name"                                     = "PublicSubnet-1"
          + "kubernetes.io/cluster/eks-with-terraform" = "owned"
          + "kubernetes.io/role/elb"                   = "1"
          + "team"                                     = "devops"
        }
      + tags_all                                       = {
          + "Name"                                     = "PublicSubnet-1"
          + "kubernetes.io/cluster/eks-with-terraform" = "owned"
          + "kubernetes.io/role/elb"                   = "1"
          + "team"                                     = "devops"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc_network.aws_subnet.eks-public-subnets["2"] will be created
  + resource "aws_subnet" "eks-public-subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.32.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name"                                     = "PublicSubnet-2"
          + "kubernetes.io/cluster/eks-with-terraform" = "owned"
          + "kubernetes.io/role/elb"                   = "1"
          + "team"                                     = "devops"
        }
      + tags_all                                       = {
          + "Name"                                     = "PublicSubnet-2"
          + "kubernetes.io/cluster/eks-with-terraform" = "owned"
          + "kubernetes.io/role/elb"                   = "1"
          + "team"                                     = "devops"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc_network.aws_vpc.eks-vpc will be created
  + resource "aws_vpc" "eks-vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "eks-vpc-terraform"
          + "team" = "devops"
        }
      + tags_all                             = {
          + "Name" = "eks-vpc-terraform"
          + "team" = "devops"
        }
    }

Plan: 50 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + all_subnets         = [
      + (known after apply),
      + (known after apply),
      + (known after apply),
      + (known after apply),
      + (known after apply),
      + (known after apply),
    ]
  + eks-cluster-ca      = (known after apply)
  + eks-cluster-ep      = (known after apply)
  + eks-cluster-name    = "eks-with-terraform"
  + eks_arn             = (known after apply)
  + vpc_module_id       = (known after apply)
  + vpc_private_subnets = [
      + (known after apply),
      + (known after apply),
      + (known after apply),
    ]
  + vpc_public_subnets  = [
      + (known after apply),
      + (known after apply),
      + (known after apply),
    ]

Warning: Argument is deprecated

  with module.eks_cluster.aws_eks_addon.observability_addon,
  on ../../modules/eks/observability.tf line 33, in resource "aws_eks_addon" "observability_addon":
  33:   resolve_conflicts = "OVERWRITE"

resolve_conflicts is deprecated. The resolve_conflicts attribute can't be set
to "PRESERVE" on initial resource creation. Use resolve_conflicts_on_create
and/or resolve_conflicts_on_update instead.
